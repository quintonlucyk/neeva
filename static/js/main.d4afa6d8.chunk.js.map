{"version":3,"sources":["components/List.tsx","pages/Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["List","list","Icon","children","map","item","ListItem","ListItemIcon","ListItemText","primary","Search","listTitlePossibilities","React","calItems","setCalItems","contactItems","setContactItems","dropboxItems","setDropboxItems","slackItems","setSlackItems","tweetItems","setTweetItems","iterItems","dataWarehouse","calendarData","listTitle","title","callback","contactsData","name","dropboxData","slackData","message","tweetData","searchItems","searchText","search","tempItems","forEach","val","found","i","matching_terms","length","includes","push","initialValues","onSubmit","handleSubmit","style","width","margin","placeholder","type","as","Input","Button","CalendarToday","ContactMail","FolderOpen","Message","Twitter","App","StyledApp","styled","div","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d4afa6d8.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  List as MaterialList,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  children: JSX.Element;\r\n  list: any[]; //Since this is a preliminary challenge, skipping interface def\r\n}\r\n\r\nconst List: React.FC<Props> = ({ list, children: Icon }) => {\r\n  return (\r\n    <MaterialList>\r\n      {list.map((item) => (\r\n        <ListItem>\r\n          <ListItemIcon>{Icon}</ListItemIcon>\r\n          <ListItemText primary={item} />\r\n        </ListItem>\r\n      ))}\r\n    </MaterialList>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import * as React from \"react\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport { Input, Button } from \"@material-ui/core\";\r\nimport {\r\n  Search as SearchIcon,\r\n  CalendarToday,\r\n  ContactMail,\r\n  FolderOpen,\r\n  Message,\r\n  Twitter,\r\n} from \"@material-ui/icons\";\r\n\r\nimport List from \"../components/List\";\r\nimport calendarData from \"../data/calendar.json\";\r\nimport contactsData from \"../data/contacts.json\";\r\nimport dropboxData from \"../data/dropbox.json\";\r\nimport slackData from \"../data/slack.json\";\r\nimport tweetData from \"../data/tweet.json\";\r\n\r\ninterface Props {}\r\n\r\nconst Search: React.FC<Props> = () => {\r\n  const [calItems, setCalItems] = React.useState<Array<string>>([]);\r\n  const [contactItems, setContactItems] = React.useState<Array<string>>([]);\r\n  const [dropboxItems, setDropboxItems] = React.useState<Array<string>>([]);\r\n  const [slackItems, setSlackItems] = React.useState<Array<string>>([]);\r\n  const [tweetItems, setTweetItems] = React.useState<Array<string>>([]);\r\n\r\n  enum listTitlePossibilities {\r\n    title = \"title\",\r\n    name = \"name\",\r\n    message = \"message\",\r\n  }\r\n\r\n  interface iterItem {\r\n    dataWarehouse: Array<any>;\r\n    listTitle: listTitlePossibilities;\r\n    callback: React.Dispatch<React.SetStateAction<string[]>>;\r\n  }\r\n\r\n  const iterItems: Array<iterItem> = [\r\n    {\r\n      dataWarehouse: calendarData[\"calendar\"],\r\n      listTitle: listTitlePossibilities.title,\r\n      callback: setCalItems,\r\n    },\r\n    {\r\n      dataWarehouse: contactsData[\"contacts\"],\r\n      listTitle: listTitlePossibilities.name,\r\n      callback: setContactItems,\r\n    },\r\n    {\r\n      dataWarehouse: dropboxData[\"dropbox\"],\r\n      listTitle: listTitlePossibilities.title,\r\n      callback: setDropboxItems,\r\n    },\r\n    {\r\n      dataWarehouse: slackData[\"slack\"],\r\n      listTitle: listTitlePossibilities.message,\r\n      callback: setSlackItems,\r\n    },\r\n    {\r\n      dataWarehouse: tweetData[\"tweet\"],\r\n      listTitle: listTitlePossibilities.message,\r\n      callback: setTweetItems,\r\n    },\r\n  ];\r\n\r\n  const searchItems = React.useCallback(\r\n    ({ search: searchText }) => {\r\n      let tempItems: Array<string> = [];\r\n\r\n      iterItems.forEach(({ dataWarehouse, listTitle, callback }) => {\r\n        tempItems = [];\r\n        dataWarehouse.forEach((val) => {\r\n          let found = false;\r\n          for (let i = 0; i < val.matching_terms.length; ++i) {\r\n            if (val.matching_terms[i].includes(searchText)) {\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (found) {\r\n            tempItems.push(val[listTitle]);\r\n          }\r\n        });\r\n        callback(tempItems);\r\n      });\r\n    },\r\n    [iterItems]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Formik initialValues={{ search: \"\" }} onSubmit={searchItems}>\r\n        {({ handleSubmit }) => (\r\n          <Form\r\n            onSubmit={handleSubmit}\r\n            style={{ width: \"18em\", margin: \"0 auto\" }}\r\n          >\r\n            <Field placeholder=\"Search\" name=\"search\" type=\"input\" as={Input} />\r\n            <Button type=\"submit\">\r\n              <SearchIcon />\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      {[\r\n        [calItems, <CalendarToday />],\r\n        [contactItems, <ContactMail />],\r\n        [dropboxItems, <FolderOpen />],\r\n        [slackItems, <Message />],\r\n        [tweetItems, <Twitter />],\r\n      ].map((val) =>\r\n        (val[0] as Array<string>).length !== 0 ? (\r\n          <List list={val[0] as Array<string>}>{val[1] as JSX.Element}</List>\r\n        ) : null\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Search from \"./pages/Search\";\n\nfunction App() {\n  const StyledApp = styled.div`\n    margin: 5em auto;\n    width: 20em;\n  `;\n  return (\n    <StyledApp>\n      <Search />\n    </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}